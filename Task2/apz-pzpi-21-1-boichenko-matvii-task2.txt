1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ


     	Користувачами системи є 3 типи акторів: адміністратор системи, клієнт та IoT апарат. Клієнти взаємодіють з веб-частиною, а адміністратор системи взаємодіє з веб-частиною задля адміністрування даними та мобільним додатком для реєстрації нових приладів у системі. За рахунок цього була створена UML діаграма прецедентів (див. додаток А, рис. А.1).
    За допомогою веб-додатку клієнту надаються такі можливості, як авторизація та реєстрація, перегляд інформації відповідно до ролі користувача, доступ до робочої області з апаратами, а також можливість створення замовлень. Адміністратори також використовують веб-додаток для адміністрування даних про машини, ліки та облікові записи.
    За допомогою мобільного додатку адміністратору надаються такі можливості, як взаємодіяти з системою для реєстрації нових автоматів (машин для продажу ліків) та внесення даних про них.
    У ролі IoT-приладів виступають самі машини, які виконують процес обробки замовлень та видачі ліків. Вони також відправляють серверу власну статистику зі складом інвентаря та наявними для продажу ліками кожні 30 хвилин.


2 ПРОЄКТУВАННЯ БАЗИ ДАНИХ


        Для проектування бази даних попередньо була розроблена ER-діаграма (див. рис. 2.1). Вона складається з 10 таблиць: користувач (User), автомат/прилад/машина (Machine), статистика приладу (MachineStatistic), зупинки машин (MachinePickupPoint), відділення із ліками у автоматі (MachineMedicineSlot), ліки (Medicine), замовлення (Order), ліки в замовленні (OrderMedicine), точка зупинки (PickupPoint).
    У базі даних наявні наступні зв’язки між сутностями:
    * User і Order (1:М): Один користувач може розмістити багато замовлень.
    * Machine і Order (1:М): Одна машина може бути використана для багатьох замовлень.
    * Machine і MachineStatistic (1:М): Одна машина може генерувати багато статистик.
    * Machine і MachinePickupPoint (1:М): Одна машина може мати багато зупинок.
    * Machine і MachineMedicineSlot (1:М): Одна машина може містити багато слотів для ліків.
    * Medicine і MachineMedicineSlot (1:М): Одні ліки можуть бути в багатьох слотах машин.
    * Medicine і OrderMedicine (1:М): Одні ліки можуть бути замовлені в багатьох замовленнях.
    * Order і OrderMedicine (1:М): Одне замовлення може містити багато ліків.
    * PickupPoint і MachinePickupPoint (1:М): Одна точка зупинки може бути частиною багатьох зупинок машин.
    * PickupPoint і Order (1:М): Одна точка зупинки може бути частиною багатьох замовлень.
    Програмна система використовує СКБД PostgreSQL. Для підключення до бази були прописані необхідні дані у файлі .env.


3 СПЕЦИФІКАЦІЯ REST


    REST API в даному проекті складається із 55 ендпоінтів. Кожний ендпоінт відповідає за надання даних клієнту та виконання певної бізнес логіки. Специфікація кожного ендпоінту наведена у таблиці 3.1.


3 СПЕЦИФІКАЦІЯ MQTT


    MQTT частина в цьому проекті включає в себе розгортання MQTT брокеру за допомогою Docker та використовуючи базовий образ eclipse-mosquito. MQTT API за допомогою якого IoT прилад спілкується з сервером, що складається з 8 ендпоінтів (топіків). Кожний топік відповідає за надсилання певних командних або статистичних даних MQTT брокеру для подальших їх отримання та обробки на клієнті девайсу або виконання певної бізнес логіки на сервері. Специфікація кожного ендпоінту наведена у таблиці 4.1.


5 UML ДІАГРАМА РОЗГОРТАННЯ


    Для розроблюваної система була зроблена діаграма розгортання (див. рис. 5.1).
    Система містить 5 компонентів: веб сервер з API, веб-додаток/веб-сайт, база даних, мобільний застосунок, IoT-прилад (Machine). На сервері розміщується backend програмного продукту який містить більшу частину бізнес-логіки. Веб-додаток (сайт) дозволяє користувачам взаємодіяти із системою та робити замовлення. Мобільний застосунок, що працює на Android, дозволяє користувачам реєструвати нові IoT прилади у системі. IoT прилад відправляє статистичні дані та видає замовлення.


5 UML ДІАГРАМА ПАКЕТІВ


    Після  аналізу структури моделі програмної системи було виділено пакети, що складають систему. Ці пакети та зв’язки між ними можна побачити на Діаграмі пакетів у додатках (див. додаток Б, рис. Б.1).
    У основному пакеті рішення Backend було виділено такі составні пакети: пакет API із рутерами (ApiRouters), пакет бази даних із моделями та міграціями (Database), пакет сервісів (Services), пакет домену із кодом що перевикористовується в усіх інших пакетах (Domain), пакет залежностей для використання ін'єкції залежностей (dependency injection) що предоставляє фреймворк FastAPI (dependencies), для взаємодії з базою даних Postgres використовується бібліотека SQLAlchemy, а для управління міграціями використовується Alembic.


ВИСНОВКИ


    У ході виконання лабораторної роботи було отримано навички з проектування серверної частини програмної системи, розробки сценаріїв використання Use Case, проектуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи. При розробці продукту було дотримано вимоги до чистого коду та Code Convention мови програмування Python.
    Також були розроблені діаграми розгортання та пакетів.
