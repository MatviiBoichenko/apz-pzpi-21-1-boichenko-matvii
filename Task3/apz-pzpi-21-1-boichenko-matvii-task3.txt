1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

	    IoT частина системи взаємодіє з двома типами користувачів: адмінами/власниками машин та клієнтами, що можуть покупати медикаменти.
	Користувачі взаємодіють з апаратом крізь програмний застосунок, а вже програмний застосунок взаємодіє напряму по MQTT з апаратом.
	Єдина пряма взаємодія з боку користувача, це можливість подивитися поточний стан машини за допомогою монітора,
	на який виводяться поточний стан машини та що вона робить.
	    Взаємодія користувачів з IoT частиною системи представлено на діаграмі прецедентів (рис. 1).

2 ПРОГРАМНА РЕАЛІЗАЦІЯ

	    Для демонстрації функціональних можливостей IoT частини системи, було вирішено реалізувати програмний код мовою програмування Python,
	що відповідає обмеженням апаратних ресурсів IoT пристроїв та часто використовується у таких випадках.
	Для виведення інформації використовую консольний інтерфейс (CLI). Комунікація із девайсом реалізована за допомогою протоколу MQTT.
    Програмна реалізація складається з таких частин:
    -	MQTT брокеру, через який реалізовано спілкування серверної частини та пристрою;
    -	Апаратний MQTT клієнт, який може бути запущено локально для симуляції роботи реального пристрою.
    Зберігає поточний стан інформації про девайс у локальний файл щоб забезпечити правильну роботу та зберігання даних між сесіями;
    -	MQTT клієнт-міст, що отримує повідомлення від MQTT брокера, обробляє їх, забеспечуючи послідовну обробку у вигляді черги,
    та перенаправляє на HTTP API серверної частини;
    -	REST API бекенду, що отримує повідомлення від клієнта-моста та обробляє їх вносячи зміни до бази даних та надсилаючи відповідь.
    Програма апаратного MQTT клієнта, дуже легко портується на реальні IoT пристрої системи Arduino,
    треба лише додати виклики до реальних модулів фізичного апарату.

3 ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

     	Для написання IoT частини системи було обрано версію мови програмування Python 3.11.
	Для взаємодії по MQTT використовується бібліотека paho-mqtt. Всі дані між частинами системи передаються у форматі JSON,
	для валідації було використано бібліотеку Pydantic. Для детальної візуалізації використаних технологій було розроблено
	діаграму пакетів (див. рис. 2).
        Для більш детальної візуалізації взаємодії пристрою з користувачами системи було розроблено діаграму взаємодії (див. додат. А.1).
    Також було побудовано діаграму діяльності, що відображає взаємодію пристрою з сервером (див. додат. Б.1).
    Приклад коду IoT апаратної частини системи, що симулює реальний девайс, представлено у додатку В.

ВИСНОВКИ

        У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи.
     Результатом роботи є розроблена програмна реалізація IoT програмної частини.
     При розробці продукту було дотримано вимог чистого коду мови програмування Python.